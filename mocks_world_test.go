// Code generated by MockGen. DO NOT EDIT.
// Source: pager.go
//
// Generated by this command:
//
//	mockgen -source=pager.go -destination mocks_world_test.go -package page
//

// Package page is a generated GoMock package.
package page

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLoader is a mock of Loader interface.
type MockLoader[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockLoaderMockRecorder[T]
}

// MockLoaderMockRecorder is the mock recorder for MockLoader.
type MockLoaderMockRecorder[T any] struct {
	mock *MockLoader[T]
}

// NewMockLoader creates a new mock instance.
func NewMockLoader[T any](ctrl *gomock.Controller) *MockLoader[T] {
	mock := &MockLoader[T]{ctrl: ctrl}
	mock.recorder = &MockLoaderMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoader[T]) EXPECT() *MockLoaderMockRecorder[T] {
	return m.recorder
}

// Load mocks base method.
func (m *MockLoader[T]) Load(ctx context.Context, pageKey string, pageSize int) ([]T, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", ctx, pageKey, pageSize)
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Load indicates an expected call of Load.
func (mr *MockLoaderMockRecorder[T]) Load(ctx, pageKey, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockLoader[T])(nil).Load), ctx, pageKey, pageSize)
}
